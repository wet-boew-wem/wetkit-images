<?php
/**
 * @file
 * wetkit_images.module
 */

include_once 'wetkit_images.features.inc';
include_once 'theme/wetkit_images.theme.inc';

define('PICTURE_IMPLEMENTATION_WXT', 'wet-boew');

/**
 * Implements hook_init().
 */
function wetkit_images_page_build() {
  // Adding the wetkit images file to theme so it will show up in the WYSIWYG.
  drupal_add_css(drupal_get_path('module', 'wetkit_images') . '/css/wetkit_images.css', array('group' => CSS_THEME));
}

/**
 * Implements hook_menu_alter().
 */
function wetkit_images_menu_alter(&$items) {
  // Adjust picture default arguments.
  $items['admin/config/media/picture/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'description' => 'Pictures settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wetkit_images_admin_settings'),
    'access arguments' => array('administer pictures'),
    'file' => 'wetkit_images.admin.inc',
    'file path' => drupal_get_path('module', 'wetkit_images'),
  );

}

/**
 * Implements hook_theme_registry_alter().
 */
function wetkit_images_theme_registry_alter(&$theme_registry) {
  // Theme Picture Templates.
  $theme_registry['picture']['theme path'] = drupal_get_path('module', 'wetkit_images');
  $theme_registry['picture']['file'] = drupal_get_path('module', 'wetkit_images') . '/theme/wetkit_images.theme.inc';
  $theme_registry['picture']['function'] = 'wetkit_images_picture';
  $theme_registry['picture']['final'] = TRUE;

  $theme_registry['picture_source']['theme path'] = drupal_get_path('module', 'wetkit_images');
  $theme_registry['picture_source']['file'] = drupal_get_path('module', 'wetkit_images') . '/theme/wetkit_images.theme.inc';
  $theme_registry['picture_source']['function'] = 'wetkit_images_picture_source';
  $theme_registry['picture_source']['final'] = TRUE;
}

/**
 * Implements hook_media_wysiwyg_wysiwyg_allowed_view_modes_alter().
 */
function wetkit_images_media_wysiwyg_allowed_view_modes_alter(&$options, $context) {
  if ($context->type == 'image') {
    // Relabel some options
    $options['default']['label'] = t('Original Size');
    $options['teaser']['label'] = t('Quarter Size');
    $options['preview']['label'] = t('Thumbnail');
  }
}

/**
 * Implements hook_form_alter().
 */
function wetkit_images_form_alter(&$form, &$form_state, $form_id) {

  // Remove some necessary image styles.
  if ($form_id == 'ctools_entity_field_content_type_formatter_styles') {
    if (!empty($form['image_style']['#options'])) {
      $styles_to_remove = array(
        'apps_logo',
        'apps_logo_small',
        'apps_screenshot',
        'apps_featured_screenshot',
        'linkit_thumb',
      );
      foreach ($styles_to_remove as $style_name) {
        if (!empty($form['image_style']['#options'][$style_name])) {
          unset($form['image_style']['#options'][$style_name]);
        }
      }
    }
  }

  // Improve the media upload form.
  if (!empty($form['upload'])) {
    $form['upload']['#size'] = 30;
  }

  // Warm the image style cache by preloading some images.
  // This is needed when the images are added in the WYSIWYG so
  // they will be fully rendered and can be sized on insert.
  if ($form_id == 'media_format_form') {
    $form['preload'] = array(
      '#prefix' => '<div style="display: none">',
      '#suffix' => '</div>',
    );
    $image_path = $form['#media']->uri;
    $image_formats = array(
      'wetkit_image_full',
      'wetkit_image_half',
      'wetkit_image_quarter',
    );
    foreach ($image_formats as $format) {
      $form['preload'][$format] = array(
        '#markup' => theme('image', array('path' => image_style_url($format, $image_path))),
      );
    }
  }
}

/**
 * Implements hook_file_displays_alter().
 *
 * This function is designed to readjust the width and height
 * properties in the WYSIWYG.
 *
 * See this issue for more background - http://drupal.org/node/1801308.
 */
function wetkit_images_file_displays_alter(&$displays, &$file, &$view_mode) {
  if (!empty($file->override['attributes']['width'])) {
    $file->image_dimensions['width'] = $file->override['attributes']['width'];
  }
  if (!empty($file->override['attributes']['height'])) {
    $file->image_dimensions['height'] = $file->override['attributes']['height'];
  }
}

/**
 * Implements hook_preprocess_image_style().
 */
function wetkit_images_preprocess_image_style(&$variables) {
  $variables['attributes']['class'][] = str_replace('_', '-', $variables['style_name']);
}

/**
 * Implements hook_entity_info_alter().
 */
function wetkit_images_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes']['link'] = array(
    'label' => t('Link'),
    'custom settings' => TRUE,
  );
}
